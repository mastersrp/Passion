#version 130

uniform sampler2D rnm;
uniform sampler2D Texture0;

varying vec2 uv;

uniform float totStrength;
uniform float strength;
uniform float offset;
uniform float falloff;
uniform float rad;

#define SAMPLES 64
const float invSamples = 1.0f / 64.0f;

void main(  )
{
	// Unit sphere vectors
	vec3 pSphere[16] = vec3[]( vec3( 0.53812504, 0.18565957, -0.43192 ), vec3( 0.13790712, 0.24864247, 0.44301823 ), vec3( 0.33715037, 0.56794053, -0.005789503 ), vec3( -0.6999805, -0.04511441, -0.0019965635 ), vec3( 0.06896307, -0.15983082, -0.85477847 ), vec3( 0.056099437, 0.006954967, -0.1843352 ), vec3( -0.014653638, 0.14027752, 0.0762037 ), vec3( 0.010019933, -0.1924225, -0.034443386 ), vec3( -0.35775623, -0.5301969, -0.43581226 ), vec3( -0.3169221, 0.106360726, 0.015860917 ), vec3( 0.010350345, -0.58698344, 0.0046293875 ), vec3( -0.08972908, -0.49408212, 0.3287904 ), vec3( 0.7119986, -0.0154690035, -0.09183723 ), vec3( -0.053382345, 0.059675813, -0.5411899 ), vec3( 0.035267662, -0.063188605, 0.54602677 ), vec3( -0.47761092, 0.2847911, -0.0271716 ) );

	// Normal for sample ray reflection
	vec3 fres = normalize( ( texture( rnm, uv * offset ).xyz * 2.0 )  -  vec3( 1.0 ) );

	vec4 currentPixelSample = texture( Texture0, uv );
	float currentPixelDepth = currentPixelSample.a;

	// Screen space fragment coordinates
	vec3 ep = vec3( uv.xy, currentPixelDepth );

	// Fragment normal
	vec3 norm = currentPixelSample.xyz;

	// Adjust radius according to depth
	float bl = 0.0;
	float radD = rad / currentPixelDepth;

	vec3 ray, se, occNorm;
	float occluderDepth, depthDifference, normDiff;

	for( int i = 0; i < SAMPLES; i++ )
	{
		// Get random sphere vector and reflect it
		ray = radD * reflect( pSphere[i/4], fres );

		// Change direction if the ray is outside the hemisphere
		se = ep + sign( dot( ray, norm ) ) * ray;

		// Get the depth and normal of the occluder fragment
		vec4 occluderFragment = texture( Texture0, se.xy );
		occNorm = occluderFragment.xyz;

		depthDifference = currentPixelDepth - occluderFragment.a;

		normDiff = ( 1.0 - dot( occNorm, norm ) );

		// Calculate falloff
		bl  += step( falloff, depthDifference ) * normDiff * ( 1.0 - smoothstep( falloff, strength, depthDifference ) );
	}

	// Final result
	float ao = 1.0 - totStrength * bl * invSamples;
	gl_FragColor = vec4( ao, ao, ao, 1.0f );
}